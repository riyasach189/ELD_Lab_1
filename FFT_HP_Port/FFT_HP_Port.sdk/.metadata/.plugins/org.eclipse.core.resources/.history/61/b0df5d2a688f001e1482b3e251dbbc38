#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include <complex.h>
#include <xtime_l.h>
#include "dma_init.h"
#include "xparameters.h"
#include "xaxidma.h"

#define N 64

const float PI = 3.141592653589793;

const int rev64[N] = {0, 32, 16, 48, 8, 40, 24, 56, 4, 36, 20, 52, 12, 44, 28, 60,
                      2, 34, 18, 50, 10, 42, 26, 58, 6, 38, 22, 54, 14, 46, 30, 62,
                      1, 33, 17, 49, 9, 41, 25, 57, 5, 37, 21, 53, 11, 43, 27, 59,
                      3, 35, 19, 51, 13, 45, 29, 61, 7, 39, 23, 55, 15, 47, 31, 63};

float complex W[N / 2] = {1.000000 - 0.000000 * I, 0.995185 - 0.098017 * I, 0.980785 - 0.195090 * I,
						  0.956940 - 0.290285 * I,
                          0.923880 - 0.382683 * I, 0.881921 - 0.471397 * I, 0.831470 - 0.555570 * I,
						  0.773010 - 0.634393 * I,
                          0.707107 - 0.707107 * I, 0.634393 - 0.773010 * I, 0.555570 - 0.831470 * I,
						  0.471397 - 0.881921 * I,
                          0.382683 - 0.923880 * I, 0.290285 - 0.956940 * I, 0.195090 - 0.980785 * I,
						  0.098017 - 0.995185 * I,
                          -0.000000 - 1.000000 * I, -0.098017 - 0.995185 * I, -0.195090 - 0.980785 * I,
						  -0.290285 - 0.956940 * I,
                          -0.382683 - 0.923880 * I, -0.471397 - 0.881921 * I, -0.555570 - 0.831470 * I,
						  -0.634393 - 0.773010 * I,
                          -0.707107 - 0.707107 * I, -0.773010 - 0.634393 * I, -0.831470 - 0.555570 * I,
						  -0.881921 - 0.471397 * I,
                          -0.923880 - 0.382683 * I, -0.956940 - 0.290285 * I, -0.980785 - 0.195090 * I,
						  -0.995185 - 0.098017 * I};

void bitreverse(float complex dataIn[N], float complex dataOut[N])
{
    for (int i = 0; i < N; i++)
    {
        dataOut[i] = dataIn[rev64[i]];
    }
}

void FFT_stages(float complex FFT_input[N], float complex FFT_output[N])
{
    float complex temp1[N], temp2[N], temp3[N], temp4[N], temp5[N];

    // stage 1
    for (int i = 0; i < N; i = i + 2)
    {
        temp1[i] = FFT_input[i] + W[0] * FFT_input[i + 1];
        temp1[i + 1] = FFT_input[i] - W[0] * FFT_input[i + 1];
    }

    // stage 2
    for (int i = 0; i < N; i = i + 4)
    {
        temp2[i] = temp1[i] + W[0] * temp1[i + 2];
        temp2[i + 1] = temp1[i + 1] + W[16] * temp1[i + 3];

        temp2[i + 2] = temp1[i] - W[0] * temp1[i + 2];
        temp2[i + 3] = temp1[i + 1] - W[16] * temp1[i + 3];
    }

    // stage 3
    for (int i = 0; i < N; i = i + 8)
    {
        temp3[i] = temp2[i] + W[0] * temp2[i + 4];
        temp3[i + 1] = temp2[i + 1] + W[8] * temp2[i + 5];
        temp3[i + 2] = temp2[i + 2] + W[16] * temp2[i + 6];
        temp3[i + 3] = temp2[i + 3] + W[24] * temp2[i + 7];

        temp3[i + 4] = temp2[i] - W[0] * temp2[i + 4];
        temp3[i + 5] = temp2[i + 1] - W[8] * temp2[i + 5];
        temp3[i + 6] = temp2[i + 2] - W[16] * temp2[i + 6];
        temp3[i + 7] = temp2[i + 3] - W[24] * temp2[i + 7];
    }

    // stage 4
    for (int i = 0; i < N; i = i + 16)
    {
        temp4[i] = temp3[i] + W[0] * temp3[i + 8];
        temp4[i + 1] = temp3[i + 1] + W[4] * temp3[i + 9];
        temp4[i + 2] = temp3[i + 2] + W[8] * temp3[i + 10];
        temp4[i + 3] = temp3[i + 3] + W[12] * temp3[i + 11];
        temp4[i + 4] = temp3[i + 4] + W[16] * temp3[i + 12];
        temp4[i + 5] = temp3[i + 5] + W[20] * temp3[i + 13];
        temp4[i + 6] = temp3[i + 6] + W[24] * temp3[i + 14];
        temp4[i + 7] = temp3[i + 7] + W[28] * temp3[i + 15];

        temp4[i + 8] = temp3[i] - W[0] * temp3[i + 8];
        temp4[i + 9] = temp3[i + 1] - W[4] * temp3[i + 9];
        temp4[i + 10] = temp3[i + 2] - W[8] * temp3[i + 10];
        temp4[i + 11] = temp3[i + 3] - W[12] * temp3[i + 11];
        temp4[i + 12] = temp3[i + 4] - W[16] * temp3[i + 12];
        temp4[i + 13] = temp3[i + 5] - W[20] * temp3[i + 13];
        temp4[i + 14] = temp3[i + 6] - W[24] * temp3[i + 14];
        temp4[i + 15] = temp3[i + 7] - W[28] * temp3[i + 15];
    }

    // stage 5
    for (int i = 0; i < N; i = i + 32)
    {
        temp5[i] = temp4[i] + W[0] * temp4[i + 16];
        temp5[i + 1] = temp4[i + 1] + W[2] * temp4[i + 17];
        temp5[i + 2] = temp4[i + 2] + W[4] * temp4[i + 18];
        temp5[i + 3] = temp4[i + 3] + W[6] * temp4[i + 19];
        temp5[i + 4] = temp4[i + 4] + W[8] * temp4[i + 20];
        temp5[i + 5] = temp4[i + 5] + W[10] * temp4[i + 21];
        temp5[i + 6] = temp4[i + 6] + W[12] * temp4[i + 22];
        temp5[i + 7] = temp4[i + 7] + W[14] * temp4[i + 23];
        temp5[i + 8] = temp4[i + 8] + W[16] * temp4[i + 24];
        temp5[i + 9] = temp4[i + 9] + W[18] * temp4[i + 25];
        temp5[i + 10] = temp4[i + 10] + W[20] * temp4[i + 26];
        temp5[i + 11] = temp4[i + 11] + W[22] * temp4[i + 27];
        temp5[i + 12] = temp4[i + 12] + W[24] * temp4[i + 28];
        temp5[i + 13] = temp4[i + 13] + W[26] * temp4[i + 29];
        temp5[i + 14] = temp4[i + 14] + W[28] * temp4[i + 30];
        temp5[i + 15] = temp4[i + 15] + W[30] * temp4[i + 31];

        temp5[i + 16] = temp4[i] - W[0] * temp4[i + 16];
        temp5[i + 17] = temp4[i + 1] - W[2] * temp4[i + 17];
        temp5[i + 18] = temp4[i + 2] - W[4] * temp4[i + 18];
        temp5[i + 19] = temp4[i + 3] - W[6] * temp4[i + 19];
        temp5[i + 20] = temp4[i + 4] - W[8] * temp4[i + 20];
        temp5[i + 21] = temp4[i + 5] - W[10] * temp4[i + 21];
        temp5[i + 22] = temp4[i + 6] - W[12] * temp4[i + 22];
        temp5[i + 23] = temp4[i + 7] - W[14] * temp4[i + 23];
        temp5[i + 24] = temp4[i + 8] - W[16] * temp4[i + 24];
        temp5[i + 25] = temp4[i + 9] - W[18] * temp4[i + 25];
        temp5[i + 26] = temp4[i + 10] - W[20] * temp4[i + 26];
        temp5[i + 27] = temp4[i + 11] - W[22] * temp4[i + 27];
        temp5[i + 28] = temp4[i + 12] - W[24] * temp4[i + 28];
        temp5[i + 29] = temp4[i + 13] - W[26] * temp4[i + 29];
        temp5[i + 30] = temp4[i + 14] - W[28] * temp4[i + 30];
        temp5[i + 31] = temp4[i + 15] - W[30] * temp4[i + 31];
    }

    // stage 6
    for (int i = 0; i < N; i = i + 64)
    {
        for (int j = 0; j < N / 2; j++)
        {
            FFT_output[i + j] = temp5[i + j] + W[j] * temp5[i + j + 32];
        }

        for (int j = 0; j < N / 2; j++)
        {
            FFT_output[32 + i + j] = temp5[i + j] - W[j] * temp5[i + j + 32];
        }
    }
}

void recp(float complex FFT_input[N], float complex FFT_output[N])
{
	for (int i = 0; i < N; i++)
	{
		FFT_output[i] = (1/creal(FFT_input[i])) + I*(1/cimagf(FFT_input[i]));
	}
}

int main()
{
    init_platform();

    XTime PS_start_time, PS_end_time;
    XTime PL_start_time, PL_end_time;

    float complex FFT_input[N] = {};

    for (int i = 0; i < N; i++)
    {
        FFT_input[i] = i + 1.0 + (i + 1.0) * I;
    }

    float complex FFT_output_sw[N] = {};
    float complex FFT_output_hw[N] = {};
    float complex FFT_rev_sw[N] = {};
    float complex FFT_input_recp_sw[N] = {};

    ////////////Hardware 64 point FFT
	int status;

	XAxiDma AxiDMA;
	status = DMA_Init(&AxiDMA, XPAR_AXI_DMA_0_DEVICE_ID);

	if (status)
		return 1;  //DMA Init failed

	XTime_SetTime(0);
	XTime_GetTime(&PL_start_time);

	Xil_DCacheFlushRange((UINTPTR)FFT_input, ((sizeof(float complex))*N));

	//Simple DMA transfers
	status = XAxiDma_SimpleTransfer(&AxiDMA, (UINTPTR)FFT_output_hw, ((sizeof(float complex))*N), XAXIDMA_DEVICE_TO_DMA);
	status = XAxiDma_SimpleTransfer(&AxiDMA, (UINTPTR)FFT_input, ((sizeof(float complex))*N), XAXIDMA_DMA_TO_DEVICE);

	Xil_DCacheInvalidateRange((UINTPTR)FFT_input, ((sizeof(float complex))*N));

	//Check whether transfers are complete
	while(XAxiDma_Busy(&AxiDMA,XAXIDMA_DMA_TO_DEVICE));
	//printf("\n\rDMA-to-Device Transfer Done!");

	while(XAxiDma_Busy(&AxiDMA,XAXIDMA_DEVICE_TO_DMA));
	//printf("\n\rDevice-to-DMA Transfer Done!");

	XTime_GetTime(&PL_end_time);

    /////////////Software 64 point FFT

    XTime_SetTime(0);
    XTime_GetTime(&PS_start_time);

    bitreverse(FFT_input, FFT_rev_sw);
    FFT_stages(FFT_rev_sw, FFT_output_sw);
    //recp(FFT_input_recp_sw, FFT_output_sw);

    XTime_GetTime(&PS_end_time);

    ////////////////////////Verifying hardware and software results
    for (int i = 0; i < N; i++)
    {
    	printf("\n\rPS Output: %f + %fI, PL Output: %f + %fI", crealf(FFT_output_sw[i]),
    			cimagf(FFT_output_sw[i]), crealf(FFT_output_hw[i]), cimagf(FFT_output_hw[i]));
    	float diff1 = abs(crealf(FFT_output_sw[i]) - crealf(FFT_output_hw[i]));
    	float diff2 = abs(cimagf(FFT_output_sw[i]) - cimagf(FFT_output_hw[i]));

    	if (diff1 >= 0.001 && diff2 >= 0.001)
    	{
    		printf("\n\rData Mismatch found at index %d!", i);
    		break;
    	}

    	else
    	{
    		printf("\nDMA transfer successful!");
    	}
    }

    ///////////////Hardware and Software Execution Time Calculation

    float time = 0;
    time = (float) 1.0*(PS_end_time-PS_start_time)/(COUNTS_PER_SECOND/1000000);
    printf("\n\rExecution time for PS in microseconds: %f", time);

    time = 0;
    time = (float) 1.0*(PL_end_time-PL_start_time)/(COUNTS_PER_SECOND/1000000);
    printf("\n\rExecution time for PL in microseconds: %f", time);

    cleanup_platform();
    return 0;
}
